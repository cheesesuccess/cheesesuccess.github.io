
function rewriteFile(absFile) {
  const dir = path.dirname(absFile)
  let src = fs.readFileSync(absFile, 'utf8')
  let changed = false

  // Patterns: import ... from '...';  import '...';  export ... from '...';  dynamic import('...')
  const patterns = [
    /\bfrom\s+(['"])(~\/[^'"]+)\1/g,
    /\bimport\s*\(\s*(['"])(~\/[^'"]+)\1\s*\)/g,
    /\bimport\s+(['"])(~\/[^'"]+)\1/g,
    /\bexport\s+[^;]*\s+from\s+(['"])(~\/[^'"]+)\1/g,
  ]

  function replaceOne(spec) {
    const tildePath = spec.slice(2) // remove "~/"
    const baseTarget = path.resolve(SRC, tildePath)
    const found = resolveWithExtensions(baseTarget)
    const target = found || baseTarget
    let rel = path.relative(dir, target)
    if (!rel.startsWith('.')) rel = './' + rel
    rel = toPosix(rel)
    return rel
  }

  for (const pat of patterns) {
    src = src.replace(pat, (_m, q, spec) => {
      try {
        const rel = replaceOne(spec)
        changed = true
        return _m.replace(spec, rel)
      } catch {
        return _m
      }
    })
  }

  if (changed) {
    fs.writeFileSync(absFile, src, 'utf8')
    return true
  }
  return false
}

const files = listFiles(SRC)
let rewrites = 0
for (const f of files) {
  if (rewriteFile(f)) rewrites++
}
console.log(`[rewrite-tilde-imports] Rewrote ${rewrites} files out of ${files.length}`)
